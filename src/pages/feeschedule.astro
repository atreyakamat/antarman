---
import Layout from '../layouts/HomeLayout.astro';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import ParticleBG from "../components/ParticleBG.astro";
import fs from 'fs/promises';
import path from 'path';
let doctors = [];
let title = "Fee Schedule";
try {
  const mdFilePath = path.join(process.cwd(), 'src', 'content', 'clinics', 'FeeSchedule.md');
  const fileContent = await fs.readFile(mdFilePath, 'utf8');
  const frontmatterMatch = fileContent.match(/^---\r?\n([\s\S]*?)\r?\n---/);
  if (frontmatterMatch && frontmatterMatch[1]) {
    const yaml = await import('js-yaml');
    const parsed = yaml.load(frontmatterMatch[1]);
    if (parsed) {
      title = parsed.title || title;
      doctors = parsed.doctors || [];
    }
  }
} catch (err) {
  console.error('Error reading FeeSchedule.md:', err);
}
---
<Layout title="Fee Schedule | Antarman">
    <Header />
    <ParticleBG />
    <main class="relative">
        <div class="absolute inset-0 bg-gradient-to-b from-purple-900/50 via-purple-800/30 to-transparent"></div>
        <div class="relative z-10">
            <div class="container mx-auto px-6 py-16 text-center md:py-20 lg:px-0 lg:py-28">
                <h1 class="text-5xl font-extrabold leading-tight text-white md:text-6xl lg:text-7xl animate-fade-in">
                    Fee Schedule
                </h1>
                <p class="mx-auto mt-6 max-w-3xl text-xl text-purple-100 md:text-2xl animate-slide-up">
                    Transparent pricing for quality mental healthcare. View our comprehensive fee structure and find the right care plan for you.
                </p>
            </div>
        </div>
    </main>

    <main class="container mx-auto p-4" id="main-content">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
            {doctors.length > 0 ? doctors.map((doctor, index) => (
                <div class="group relative" key={doctor.name}>
                    <div class="doctor-card bg-purple-900/30 rounded-2xl overflow-hidden backdrop-blur-sm transition-all duration-500 ease-in-out hover:shadow-lg hover:shadow-purple-500/20">
                        <button class="close-btn absolute top-2 right-2 bg-purple-500 text-white rounded-full w-8 h-8 flex items-center justify-center transition-all duration-500 ease-in-out z-50 hover:bg-purple-600 transform hover:scale-110 opacity-0">
                            âœ•
                        </button>
                        <div class="relative w-full h-64 overflow-hidden">
                            <img 
                                src={doctor.image} 
                                alt={doctor.name} 
                                class="w-full h-full object-cover object-center transition-transform duration-500 ease-in-out group-hover:scale-105"
                                loading="lazy"
                            />
                            <div class="absolute inset-0 bg-gradient-to-t from-purple-950/40 to-transparent"></div>
                        </div>
                        <div class="p-4">
                            <h3 class="text-3xl font-bold text-white text-center mb-2 transition-colors duration-300 ease-in-out hover:text-purple-200">{doctor.name}</h3>
                            <div class="fee-structure hidden opacity-0 transition-all duration-500 ease-in-out transform translate-y-4">
                                <div class="text-gray-300 space-y-2 mt-4">
                                    {doctor.fees && Object.entries(doctor.fees).map(([category, details]) => (
                                        <div class="fee-category" key={category}>
                                            <button class="fee-toggle w-full flex justify-between items-center py-2 px-4 rounded-lg bg-purple-800/50 hover:bg-purple-700/50 transition-colors duration-300">
                                                <span class="font-medium text-lg text-white">{category}</span>
                                                <svg class="w-6 h-6 text-white transform transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                                </svg>
                                            </button>
                                            <div class="fee-details max-h-0 overflow-hidden transition-all duration-500 ease-in-out mt-2 ml-4 space-y-2">
                                                {typeof details === 'object' && details !== null ? (
                                                    Object.entries(details).map(([type, value]) => (
                                                        <div class="flex justify-between items-start text-base" key={type}>
                                                            <span class="text-white font-bold text-lg min-w-[100px]">{type}:</span>
                                                            <span class="text-white font-bold text-lg text-right flex-1 ml-4">{value}</span>
                                                        </div>
                                                    ))
                                                ) : (
                                                    <div class="flex justify-between items-start text-base">
                                                        <span class="text-white font-bold text-lg min-w-[100px]">Fee:</span>
                                                        <span class="text-white font-bold text-lg text-right flex-1 ml-4">{details}</span>
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            )) : (
                <div class="col-span-full text-center text-white">No doctor data available.</div>
            )}
        </div>

        <div id="modal-overlay" class="fixed inset-0 bg-black/50 hidden backdrop-blur-sm transition-all duration-500 ease-in-out"></div>

        <style>
            .doctor-card {
                box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
                border: 1px solid rgba(255, 255, 255, 0.1);
                cursor: pointer;
                transform: translateY(0);
                transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            }
            
            .doctor-card:hover {
                transform: translateY(-5px);
            }
            
            .doctor-card.active {
                position: fixed;
                inset: 2rem;
                margin: auto;
                max-width: 600px;
                max-height: 80vh;
                z-index: 50;
                background: rgba(88, 28, 135, 0.95);
                transform: scale(1);
                transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
                overflow-y: auto;
                scrollbar-width: none; /* Firefox */
                -ms-overflow-style: none; /* IE and Edge */
            }

            .doctor-card.active::-webkit-scrollbar {
                display: none; /* Chrome, Safari and Opera */
            }

            .doctor-card.active .fee-structure {
                display: block;
                opacity: 1;
                transform: translateY(0);
            }

            .doctor-card.active .close-btn {
                opacity: 1;
            }

            #modal-overlay.show {
                display: block;
                opacity: 1;
            }

            .fee-toggle.active svg {
                transform: rotate(45deg);
            }

            .fee-details {
                max-height: 0;
                opacity: 0;
                transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            }

            .fee-details.active {
                max-height: 500px;
                opacity: 1;
            }

            @keyframes title {
                0% {
                    opacity: 0;
                    transform: translateY(20px);
                }
                100% {
                    opacity: 1;
                    transform: translateY(0);
                }
            }

            @keyframes fade-in {
                0% {
                    opacity: 0;
                }
                100% {
                    opacity: 1;
                }
            }

            @keyframes slideUp {
                from { transform: translateY(20px); opacity: 0; }
                to { transform: translateY(0); opacity: 1; }
            }

            .animate-slide-up {
                animation: slideUp 1s ease-out;
            }

            .animate-title {
                animation: title 0.6s ease-out forwards;
            }

            .animate-fade-in {
                animation: fade-in 0.6s ease-out forwards;
                animation-delay: 0.3s;
                opacity: 0;
            }
        </style>

        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const cards = document.querySelectorAll('.doctor-card');
                const closeBtns = document.querySelectorAll('.close-btn');
                const modalOverlay = document.getElementById('modal-overlay');

                const closeActiveCard = () => {
                    cards.forEach(card => {
                        (card as HTMLElement).style.transform = 'scale(0.95)';
                        setTimeout(() => {
                            card.classList.remove('active');
                            (card as HTMLElement).style.transform = '';
                        }, 100);
                    });
                    modalOverlay?.classList.remove('show');
                    document.body.style.overflow = 'auto';
                };

                cards.forEach(card => {
                    card.addEventListener('click', (e) => {
                        e.stopPropagation();
                        
                        if (!card.classList.contains('active')) {
                            closeActiveCard();
                            (card as HTMLElement).style.transform = 'scale(0.95)';
                            setTimeout(() => {
                                card.classList.add('active');
                                (card as HTMLElement).style.transform = 'scale(1)';
                                modalOverlay?.classList.add('show');
                                document.body.style.overflow = 'hidden';
                            }, 100);
                        }
                    });

                    // Add click handlers for fee toggles
                    card.querySelectorAll('.fee-toggle').forEach(toggle => {
                        toggle.addEventListener('click', (e) => {
                            e.stopPropagation();
                            
                            const details = toggle.nextElementSibling as HTMLElement;
                            const isExpanding = !toggle.classList.contains('active');
                            
                            // Close all other fee details in this card
                            const allToggles = card.querySelectorAll('.fee-toggle');
                            const allDetails = card.querySelectorAll('.fee-details');
                            
                            allToggles.forEach((t, index) => {
                                if (t !== toggle) {
                                    t.classList.remove('active');
                                    allDetails[index].classList.remove('active');
                                }
                            });

                            // Toggle the clicked fee details with animation
                            toggle.classList.toggle('active');
                            details.classList.toggle('active');
                        });
                    });
                });

                closeBtns.forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        closeActiveCard();
                    });
                });

                modalOverlay?.addEventListener('click', () => {
                    closeActiveCard();
                });
            });
        </script>
    </main>
    <Footer />
</Layout>