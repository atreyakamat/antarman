---
// @ts-nocheck - Disable TypeScript checking for this file
import { getCollection } from 'astro:content';
// @ts-ignore - Ignore import errors
import { promises as fs } from 'node:fs';
// @ts-ignore - Ignore import errors
import { join as pathJoin } from 'node:path';
import type { CollectionEntry } from 'astro:content';

// Define types
type ClinicLocation = {
  name: string;
  address: string;
  phone: string;
  email: string;
};

// Initialize variables
let title: string = "Our Clinic Locations";
let locations: ClinicLocation[] = [];

try {
  // Direct file read approach as a backup
  // @ts-ignore - Ignore process.cwd() errors
  const mdFilePath = pathJoin(import.meta.env.ROOT || process.cwd(), 'src', 'content', 'clinics', 'ClinicLocation.md');
  const fileContent = await fs.readFile(mdFilePath, 'utf8');
  
  // Parse frontmatter from markdown (basic implementation)
  const frontmatterMatch = fileContent.match(/^---\r?\n([\s\S]*?)\r?\n---/);
  
  if (frontmatterMatch && frontmatterMatch[1]) {
    const frontmatterContent = frontmatterMatch[1];
    
    // Extract title
    const titleMatch = frontmatterContent.match(/title:\s*"([^"]+)"/);
    if (titleMatch && titleMatch[1]) {
      title = titleMatch[1];
    }
    
    // Parse locations using regex (basic implementation)
    const locationBlocks = frontmatterContent.match(/- name: "[^"]+"/g);
    
    if (locationBlocks && locationBlocks.length > 0) {
      locations = [];
      
      // Extract each location's data
      let currentIndex = frontmatterContent.indexOf('- name:');
      while (currentIndex >= 0) {
        const nextIndex = frontmatterContent.indexOf('- name:', currentIndex + 1);
        const locationBlock = nextIndex > 0 
          ? frontmatterContent.substring(currentIndex, nextIndex) 
          : frontmatterContent.substring(currentIndex);
        
        const nameMatch = locationBlock.match(/name: "([^"]+)"/);
        const addressMatch = locationBlock.match(/address: "([^"]+)"/);
        const phoneMatch = locationBlock.match(/phone: "([^"]+)"/);
        const emailMatch = locationBlock.match(/email: "([^"]+)"/);
        
        if (nameMatch && addressMatch && phoneMatch && emailMatch) {
          locations.push({
            name: nameMatch[1],
            address: addressMatch[1],
            phone: phoneMatch[1],
            email: emailMatch[1]
          });
        }
        
        currentIndex = nextIndex;
      }
      
      console.log(`Direct parse found ${locations.length} locations`);
    }
  }
} catch (directReadError) {
  console.error("Error reading MD file directly:", 
    directReadError instanceof Error ? directReadError.message : String(directReadError));
  // No fallback data - only use MD content
}
---

<section class="py-12 w-full bg-gradient-to-b from-purple-900/40 to-transparent">
  <h2 class="text-3xl font-bold text-center text-white mb-12">{title}</h2>
  
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 max-w-7xl mx-auto px-4">
    {locations.length > 0 ? (
      locations.map((location: ClinicLocation) => (
        <div class="bg-white/10 backdrop-blur-lg rounded-lg overflow-hidden shadow-lg hover:transform hover:scale-105 transition-all duration-300 min-w-[280px]">
          <div class="p-8">
            <h3 class="text-2xl font-semibold text-white mb-3">{location.name}</h3>
            <div class="space-y-3 text-gray-200">
              <p class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
                {location.address}
              </p>
              <p class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                </svg>
                {location.phone}
              </p>
              {location.email && location.email !== "NONE" && (
                <p class="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                  {location.email}
                </p>
              )}
            </div>
          </div>
        </div>
      ))
    ) : (
      <div class="col-span-full text-center text-white">
        <p>Loading location data...</p>
      </div>
    )}
  </div>
</section>
