---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

// Define types
type MediaEntry = CollectionEntry<'home-media'>;
type SeriesMap = Record<string, MediaEntry[]>;

// Fetch all videos with error handling
let videos: MediaEntry[] = [];
try {
  videos = await getCollection('home-media');
  console.log(`Successfully loaded ${videos.length} videos`);
} catch (error) {
  console.error("Error fetching videos:", error instanceof Error ? error.message : String(error));
}

// Group videos by type for display
const featuredVideos = videos.filter(video => video.data.featured === true);
const regularVideos = videos.filter(video => !video.data.featured && !video.data.seriesId);

// Process series videos
const seriesMap: SeriesMap = {};
videos
  .filter(video => video.data.seriesId)
  .forEach(video => {
    const id = video.data.seriesId;
    if (id) {
      if (!seriesMap[id]) seriesMap[id] = [];
      seriesMap[id].push(video);
    }
  });

// Sort series videos by order
Object.keys(seriesMap).forEach(id => {
  seriesMap[id].sort((a: MediaEntry, b: MediaEntry) => (a.data.seriesOrder || 0) - (b.data.seriesOrder || 0));
});

// Create display list - prioritizing featured videos
const seriesFirstVideos = Object.values(seriesMap).map((series: MediaEntry[]) => series[0]);
const displayVideos = [...featuredVideos, ...regularVideos, ...seriesFirstVideos].slice(0, 6);
---

<section class="py-16">
  <h2 class="text-4xl font-bold text-center mb-12 text-white">Media Gallery</h2>

  {/* Masonry layout with CSS columns */}
  <div class="columns-1 sm:columns-2 lg:columns-3 gap-6 max-w-7xl mx-auto px-4 space-y-6">
    {displayVideos.length > 0 ? (
      displayVideos.map(video => {
        const isSeries = video.data.seriesId && video.data.seriesId in seriesMap && seriesMap[video.data.seriesId]?.length > 1;
        const series = isSeries && video.data.seriesId ? seriesMap[video.data.seriesId] : null;
        const isLarge = video.data.featured;
        
        return (
          <div class="bg-[#603A88] hover:bg-[#7E01B3] transition-all duration-300 rounded-xl overflow-hidden break-inside-avoid mb-6">
            {/* Video Player */}
            <div class={isLarge ? "aspect-[16/9]" : "aspect-video"}>
              <iframe
                id={isSeries && video.data.seriesId ? `series-${video.data.seriesId}` : `video-${video.slug}`}
                class="w-full h-full"
                src={`https://www.youtube.com/embed/${video.data.youtubeId}`}
                title={video.data.title}
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowfullscreen>
              </iframe>
            </div>
            
            {/* Video Info */}
            <div class={isLarge ? "p-6" : "p-4"}>
              <h3 class={`font-bold text-white ${isLarge ? "text-2xl mb-3" : "text-lg mb-2"}`}>
                {isSeries ? video.data.seriesName || video.data.title : video.data.title}
              </h3>
              <p class={`text-gray-200 ${isLarge ? "text-lg" : "text-sm"}`}>
                {video.data.description}
              </p>
              
              {/* Series Navigation */}
              {isSeries && series && (
                <div class="flex flex-wrap gap-2 mt-4">
                  {series.map((seriesVideo: MediaEntry, index: number) => (
                    <button
                      class="px-3 py-1 bg-purple-700 hover:bg-purple-600 text-white rounded text-sm"
                      data-series-id={video.data.seriesId}
                      data-video-id={seriesVideo.data.youtubeId}
                      data-index={index}
                    >
                      Part {seriesVideo.data.seriesOrder || index + 1}
                    </button>
                  ))}
                </div>
              )}
            </div>
          </div>
        );
      })
    ) : (
      <div class="text-center text-gray-400 col-span-full">
        <p>No videos found. Please add video content files to the home-media collection.</p>
      </div>
    )}
  </div>

  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      // Add click handlers for series buttons
      document.querySelectorAll('[data-series-id]').forEach(button => {
        button.addEventListener('click', (e) => {
          const btn = e.currentTarget;
          const seriesId = btn.getAttribute('data-series-id');
          const videoId = btn.getAttribute('data-video-id');
          const player = document.getElementById(`series-${seriesId}`);
          
          if (player && videoId) {
            player.src = `https://www.youtube.com/embed/${videoId}`;
            
            // Highlight active button
            document.querySelectorAll(`[data-series-id="${seriesId}"]`).forEach(b => {
              b.classList.remove('bg-purple-500');
              b.classList.add('bg-purple-700');
            });
            btn.classList.remove('bg-purple-700');
            btn.classList.add('bg-purple-500');
          }
        });
      });
    });
  </script>
</section>
