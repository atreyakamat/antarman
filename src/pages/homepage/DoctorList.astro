---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

// Define types
type DoctorEntry = CollectionEntry<'doctors'>;

// Fetch all doctors from the collection
let doctors: DoctorEntry[] = [];

try {
  doctors = await getCollection('doctors');
  console.log(`Successfully loaded ${doctors.length} doctors`);
} catch (error) {
  console.error("Error fetching doctors:", error instanceof Error ? error.message : String(error));
}
---

<style>
  .doctor-card {
    position: relative;
    width: 100%;
    max-width: 300px;
    height: 450px;
    background-color: #631D76;
    margin: 10px;
    border-radius: 15px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    cursor: pointer;
    opacity: 0.9;
    overflow: hidden;
    z-index: 1;
  }

  .doctor-card.expanded {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    max-width: 800px;
    width: 90%;
    height: 80vh;
    background-color: #ffffff;
    z-index: 1000;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    transition: none;
    cursor: default;
  }

  /* Remove hover effects for expanded card */
  .doctor-card.expanded::after,
  .doctor-card.expanded:hover::after {
    display: none;
  }

  .doctor-card.expanded:hover {
    transform: translate(-50%, -50%);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    opacity: 1;
  }

  .doctor-card.expanded .doctor-image {
    height: 300px;
    width: 100%;
    object-fit: cover;
  }

  .doctor-card.expanded .doctor-info {
    background: white;
    color: #333;
    padding: 20px;
  }

  .doctor-card.expanded h3 {
    color: #631D76;
    font-size: 24px;
    margin-bottom: 15px;
  }

  .modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    z-index: 999;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .modal-overlay.active {
    display: block;
    opacity: 1;
  }

  .doctor-card::after {
    content: '';
    position: absolute;
    top: 0;
    left: -75%;
    width: 50%;
    height: 100%;
    background: rgba(255, 255, 255, 0.2);
    transform: skewX(-25deg);
    transition: left 0.3s ease;
  }

  .doctor-card:hover::after {
    left: 100%;
  }

  .doctor-card:hover:not(.expanded) {
    transform: scale(1);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    opacity: 1;
    z-index: 2;
  }

  .doctor-list:has(.doctor-card:hover) .doctor-card:not(:hover) {
    opacity: 0.7;
    filter: blur(2px);
  }

  .doctor-list {
    position: relative;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    margin: 0;
  }

  .doctor-image {
    width: 100%;
    height: 60%;
    object-fit: cover;
    border-top-left-radius: 15px;
    border-top-right-radius: 15px;
  }

  .doctor-info {
    padding: 10px;
    position: relative;
    color: white;
  }

  .doctor-extra-info {
    display: none;
    padding: 30px;
    background-color: white;
    color: #333;
    border-radius: 0 0 15px 15px;
  }

  .doctor-card.expanded .doctor-extra-info {
    display: block;
  }

  /* Remove blur effect on other cards when expanded */
  .doctor-list:has(.doctor-card.expanded) .doctor-card:not(.expanded) {
    opacity: 1;
    filter: none;
  }

  .doctor-extra-info h4 {
    color: #631D76;
    margin: 15px 0 10px;
  }

  .doctor-extra-info p {
    line-height: 1.6;
    margin-bottom: 10px;
  }

  .doctor-extra-info ul {
    padding-left: 20px;
    margin: 10px 0;
  }

  .doctor-extra-info li {
    margin: 5px 0;
  }

  .view-more-button {
    display: block;
    margin: 5px auto;
    padding: 8px 15px;
    background-color: white;
    color: #631D76;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    text-align: center;
    position: absolute;
    top: 10px;
    right: 10px;
    transition: all 0.3s ease;
    font-size: 0.9rem;
    font-weight: bold;
  }

  .view-more-button:hover {
    background-color: #631D76;
    color: white;
  }

  .close-button {
    display: none;
    position: absolute;
    top: 20px;
    right: 20px;
    background: #631D76;
    color: white;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    cursor: pointer;
    z-index: 1001;
    font-size: 20px;
    transition: all 0.3s ease;
  }

  .close-button:hover {
    background: #4a1657;
    transform: rotate(90deg);
  }

  .doctor-card.expanded .close-button {
    display: block;
  }

  .doctor-card.expanded .view-more-button {
    display: none;
  }

  @media (max-width: 768px) {
    .doctor-card {
      max-width: 100%;
      height: auto;
    }

    .doctor-card.expanded {
      width: 95%;
      height: 90vh;
      max-width: none;
    }
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const doctorCards = document.querySelectorAll('.doctor-card');
    const body = document.body;

    const overlay = document.createElement('div');
    overlay.className = 'modal-overlay';
    body.appendChild(overlay);

    doctorCards.forEach(card => {
      const closeBtn = document.createElement('button');
      closeBtn.className = 'close-button';
      closeBtn.innerHTML = 'Ã—';
      card.appendChild(closeBtn);

      const viewMoreBtn = card.querySelector('.view-more-button');
      
      if (viewMoreBtn) {
        viewMoreBtn.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          card.classList.add('expanded');
          overlay.classList.add('active');
          body.style.overflow = 'hidden';
        });
      }

      const closeCard = () => {
        const expandedCard = document.querySelector('.doctor-card.expanded');
        if (expandedCard) {
          expandedCard.classList.remove('expanded');
          overlay.classList.remove('active');
          body.style.overflow = 'auto';
        }
      };

      closeBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        closeCard();
      });

      // Close when clicking outside the card
      document.addEventListener('click', (e) => {
        const expandedCard = document.querySelector('.doctor-card.expanded');
        if (expandedCard && e.target && !expandedCard.contains(e.target instanceof Node ? e.target : null)) {
          closeCard();
        }
      });

      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          closeCard();
        }
      });
    });
  });
</script>

<h1>Our Doctors</h1>
<div class="doctor-list">
  {doctors.map((doctor: DoctorEntry) => (
    <div class="doctor-card">
      <img src={doctor.data.image} alt={doctor.data.name} class="doctor-image" width="300" height="400">
      <div class="doctor-info">
        <h3>{doctor.data.name}</h3>
        {doctor.data.specialty && <p>{doctor.data.specialty}</p>}
        {doctor.data.qualification && <p>{doctor.data.qualification}</p>}
        {doctor.data.description && <p>{doctor.data.description}</p>}
        {doctor.data.detailedInfo && <a href="#" class="view-more-button">View More</a>}
      </div>
      {doctor.data.detailedInfo && (
        <div class="doctor-extra-info">
          {doctor.data.detailedInfo.about && (
            <>
              <h4>About Me</h4>
              <div set:html={doctor.data.detailedInfo.about}></div>
            </>
          )}
          
          {doctor.data.detailedInfo.qualifications && (
            <>
              <h4>Qualifications</h4>
              <div set:html={doctor.data.detailedInfo.qualifications}></div>
            </>
          )}
          
          {doctor.data.detailedInfo.services && (
            <>
              <h4>Services Provided</h4>
              <div set:html={doctor.data.detailedInfo.services}></div>
            </>
          )}
          
          {doctor.data.detailedInfo.availability && (
            <>
              <h4>Availability</h4>
              <div set:html={doctor.data.detailedInfo.availability}></div>
            </>
          )}
          
          {doctor.data.detailedInfo.languages && (
            <>
              <h4>Languages</h4>
              <div set:html={doctor.data.detailedInfo.languages}></div>
            </>
          )}
          
          {doctor.data.detailedInfo.contact && (
            <>
              <h4>Contact</h4>
              <div set:html={doctor.data.detailedInfo.contact}></div>
            </>
          )}
        </div>
      )}
    </div>
  ))}
</div>
